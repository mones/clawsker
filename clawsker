#!/usr/bin/perl -w
#
# Clawsker :: A Claws Mail Tweaker
# Copyright 2007-2017 Ricardo Mones <ricardo@mones.org>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# See COPYING file for license details.
# See AUTHORS file for a complete list of contributors.
#

binmode STDOUT, ":encoding(utf8)";

use 5.010_000;
use strict;
use utf8;
use version 0.77;
use Glib qw(TRUE FALSE);
use Gtk2;
use POSIX qw(setlocale);
use Locale::gettext;
use Encode;
use Digest::MD5 qw(md5_hex);
use Getopt::Long;

my $NAME = 'clawsker';
my $PREFIX = '@PREFIX@';
my $LIBDIR = '@LIBDIR@';
my $DATADIR = '@DATADIR@';
my $VERSION = '@VERSION@';
my $VERBOSE = FALSE;
my $READONLY = FALSE;
my $CLAWSV = undef;
my $main_window = undef;

my $locale = (defined($ENV{LC_MESSAGES}) ? $ENV{LC_MESSAGES} : $ENV{LANG});
$locale = "C" unless defined($locale);
setlocale (LC_ALL, $locale);
bindtextdomain ($NAME, sprintf ('%s/share/locale', $PREFIX));
textdomain ($NAME);

my $SHOWHINTS = FALSE;
$SHOWHINTS = TRUE if ($Gtk2::VERSION >= 1.040 and Gtk2->CHECK_VERSION (2, 12, 0));

sub _ {
    my $str = shift;
    my %par = @_;
    my $xla = gettext ($str);
    if (scalar(keys(%par)) > 0) {
        foreach my $key (keys %par) {
            $xla =~ s/\{$key\}/$par{$key}/g;
        }
    }
    return decode_utf8($xla);
}

# default messages
%xl::s = (
    win_title => _('Claws Mail Hidden Preferences'),
    about => _('About...'),
    about_title => _('Clawsker :: A Claws Mail Tweaker'),
    about_license => _('License:'),
    about_version => _('Version:'),

    tab_colours => _('Colours'),
    tab_behaviour => _('Behaviour'),
    tab_gui => _('GUI'),
    tab_other => _('Other'),
    tab_winpos => _('Windows'),
    tab_accounts => _('Accounts'),
    tab_plugins => _('Plugins'),
    tab_hotkeys => _('Hotkeys'),
    tab_info => _('Info'),

    ab_frame => _('Addressbook'),
    mem_frame => _('Memory'),
    msgview_frame => _('Message View'),
    log_frame => _('Log window'),
    dnd_frame => _('Drag \'n\' drop'),
    ssl_frame => _('Secure Sockets Layer'),
    msgs_frame => _('Messages'),
    swc_frame => _('Completion'),
    stripes_frame => _('Coloured stripes'),
    sbar_frame => _('Scroll bars'),
    mlist_frame => _('Message List'),
    mview_frame => _('Message View'),
    compo_frame => _('Compose window'),
    netm_frame => _('NetworkManager'),
    diff_frame => _('Viewing patches'),
    mpass_frame => _('Master passphrase'),
    compose_frame => _('Compose window'),
    qs_frame => _('Quick search'),

    l_oth_use_dlg => _('Use detached address book edit dialogue'),
    h_oth_use_dlg => _('If true use a separate dialogue to edit a person\'s details. Otherwise will use a form embedded in the address book\'s main window.'),
    l_oth_max_use => _('Maximum memory for message cache'),
    l_oth_max_use_units => _('kilobytes'),
    h_oth_max_use => _('The maximum amount of memory to use to cache messages, in kilobytes.'),
    l_oth_min_time => _('Minimun time for cache elements'),
    l_oth_min_time_units => _('minutes'),
    h_oth_min_time => _('The minimum time in minutes to keep a cache in memory. Caches more recent than this time will not be freed, even if the memory usage is too high.'),
    l_oth_use_netm => _('Use NetworkManager'),
    h_oth_use_netm => _('Use NetworkManager to switch offline automatically.'),
    l_oth_mp_rounds => _('Rounds for PBKDF2 function'),
    h_oth_mp_rounds => _('Specify the number of iterations the key derivation function will be applied on master passphrase computation. Does not modify currently stored passphrase, only master passphrases computed after changing this value are affected.'),

    l_gui_b_unread => _('Show unread messages with bold font'),
    h_gui_b_unread => _('Show unread messages in the Message List using a bold font.'),
    l_gui_no_markup => _('Don\'t use markup'),
    h_gui_no_markup => _('Don\'t use bold and italic text in Compose dialogue\'s account selector.'),
    l_gui_dot_lines => _('Use dotted lines in tree view components'),
    h_gui_dot_lines => _('Use the old dotted line look in the main window tree views (Folder, Message and other lists) instead of the modern lineless look.'),
    l_gui_h_scroll => _('Enable horizontal scrollbar'),
    h_gui_h_scroll => _('Enable the horizontal scrollbar in the Message List.'),
    l_gui_swp_from => _('Display To column instead From column in Sent folder'),
    h_gui_swp_from => _('Display the recipient\'s email address in a To column of the Sent folder instead of the originator\'s one in a From column.'),
    l_gui_v_scroll => _('Folder List scrollbar behaviour'),
    h_gui_v_scroll => _('Specify the policy of vertical scrollbar of Folder List: show always, automatic or hide always.'),
    l_gui_v_scroll_show => _('Show always'),
    l_gui_v_scroll_auto => _('Automatic'),
    l_gui_v_scroll_hide => _('Hide always'),
    l_gui_from_show => _('From column displays'),
    h_gui_from_show => _('Selects the data displayed in the From column of the Message List: name, address or both.'),
    l_gui_from_show_name => _('Name only'),
    l_gui_from_show_addr => _('Address only'),
    l_gui_from_show_both => _('Both name and address'),
    l_gui_strip_off => _('Coloured lines contrast'),
    h_gui_strip_off => _('Specify the value to use when creating alternately coloured lines in tree view components. The smaller the value, the less visible the difference in the alternating colours of the lines.'),
    l_gui_cursor_v => _('Show cursor'),
    h_gui_cursor_v => _('Display the cursor in the Message View.'),
    l_gui_toolbar_d => _('Detachable toolbars'),
    h_gui_toolbar_d => _('Show handles in the toolbars.'),
    l_gui_strip_all => _('Use stripes in all tree view components'),
    h_gui_strip_all => _('Enable alternately coloured lines in all tree view components.'),
    l_gui_strip_sum => _('Use stripes in Folder List and Message List'),
    h_gui_strip_sum => _('Enable alternately coloured lines in Message List and Folder List.'),
    l_gui_two_line_v => _('2 lines per Message List item in 3-column layout'),
    h_gui_two_line_v => _('Spread Message List information over two lines when using the three column mode.'),
    l_gui_margin_co => _('Show margin'),
    h_gui_margin_co => _('Shows a small margin in the Compose View.'),
    l_gui_mview_date => _('Don\'t display localized date'),
    h_gui_mview_date => _('Toggles localization of date format in Message View.'),
    l_gui_zero_char => _('Zero replacement character'),
    h_gui_zero_char => _('Replaces \'0\' with the given character in Folder List.'),
    l_gui_type_any => _('Editable headers'),
    h_gui_type_any => _('Allows to manually type any value in Compose Window header entries or just select from the available choices in the associated dropdown list.'),
    l_gui_warn_send_multi => _('Warn when sending to more than'),
    l_gui_warn_send_multi_units => _('recipients'),
    h_gui_warn_send_multi => _('Show a warning dialogue when sending to more recipients than specified. Use 0 to disable this check.'),
    l_gui_next_del => _('Select next message on delete'),
    h_gui_next_del => _('When deleting a message, toggles between selecting the next one (newer message) or the previous one (older message).'),

    l_beh_hover_t => _('Drag \'n\' drop hover timeout'),
    l_beh_hover_t_units => _('milliseconds'),
    h_beh_hover_t => _('Time in milliseconds that will cause a folder tree to expand when the mouse cursor is held over it during drag and drop.'),
    l_beh_dangerous => _('Don\'t confirm deletions (dangerous!)'),
    h_beh_dangerous => _('Don\'t ask for confirmation before definitive deletion of emails.'),
    l_beh_flowed => _('Respect format=flowed in messages'),
    h_beh_flowed => _('Respect format=flowed on text/plain message parts. This will cause some mails to have long lines, but will fix some URLs that would otherwise be wrapped.'),
    l_beh_parts_rw => _('Allow writable temporary files'),
    h_beh_parts_rw => _('Saves temporary files when opening attachment with write bit set.'),
    l_beh_skip_ssl => _('Don\'t check SSL certificates'),
    h_beh_skip_ssl => _('Disables the verification of SSL certificates.'),
    l_beh_up_step => _('Progress bar update step every'),
    l_beh_up_step_units => _('items'),
    h_beh_up_step => _('Update stepping in progress bars.'),
    l_beh_thread_a => _('Maximum age when threading by subject'),
    l_beh_thread_a_units => _('days'),
    h_beh_thread_a => _('Number of days to include a message in a thread when using "Thread using subject in addition to standard headers".'),
    l_beh_unsafe_ssl => _('Allow unsafe SSL certificates'),
    h_beh_unsafe_ssl => _('Allows Claws Mail to remember multiple SSL certificates for a given server/port.'),
    l_beh_use_utf8 => _('Force UTF-8 for broken mails'),
    h_beh_use_utf8 => _('Use UTF-8 encoding for broken mails instead of current locale.'),
    l_beh_warn_dnd => _('Warn on drag \'n\' drop'),
    h_beh_warn_dnd => _('Display a confirmation dialogue on drag \'n\' drop of folders.'),
    l_beh_out_ascii => _('Outgoing messages fallback to ASCII'),
    h_beh_out_ascii => _('If allowed by content, ASCII will be used to encode outgoing messages, otherwise the user-defined encoding is always enforced.'),
    l_beh_pp_unsel => _('Primary paste unselects selection'),
    h_beh_pp_unsel => _('Controls how pasting using middle-click changes the selected text and insertion point.'),
    l_beh_inline_at => _('Show inline attachments'),
    h_beh_inline_at => _('Allows to hide inline attachments already shown in mail structure view.'),
    l_beh_addr_swc => _('Address search in compose window matches any'),
    h_beh_addr_swc => _('On Tab-key completion, address text will match any part of the string or only from the start.'),
    l_beh_fold_swc => _('Folder search in folder selector matches any'),
    h_beh_fold_swc => _('On folder name completion text will match any part of the string or only from the start.'),
    l_beh_rewrite_ff => _('Rewrite first \'From\' using QP encoding'),
    h_beh_rewrite_ff => _('Workaround some servers which convert first \'From\' to \'>From\' by using Quoted-Printable transfer encoding instead of 7bit/8bit encoding.'),

    l_col_emphasis => _('X-Mailer header'),
    h_col_emphasis => _('The colour used for the X-Mailer line when its value is Claws Mail.'),
    l_col_log_err => _('Error messages'),
    h_col_log_err => _('Colour for error messages in log window.'),
    l_col_log_in => _('Server messages'),
    h_col_log_in => _('Colour for messages received from servers in log window.'),
    l_col_log_msg => _('Standard messages'),
    h_col_log_msg => _('Colour for messages in log window.'),
    l_col_log_out => _('Client messages'),
    h_col_log_out => _('Colour for messages sent to servers in log window.'),
    l_col_log_warn => _('Warning messages'),
    h_col_log_warn => _('Colour for warning messages in log window.'),

    l_col_tags_bg => _('Tags background'),
    h_col_tags_bg => _('Background colour for tags in message view.'),
    l_col_tags_text => _('Tags text'),
    h_col_tags_text => _('Text colour for tags in message view.'),

    l_col_default_header_bg => _('Default headers background'),
    h_col_default_header_bg => _('Background colour for default headers in compose window.'),
    l_col_default_header_text => _('Default headers text'),
    h_col_default_header_text => _('Text colour for default headers in compose window.'),

    l_col_qs_active_bg => _('Active quick search background'),
    h_col_qs_active_bg => _('Background colour for active quick search.'),
    l_col_qs_active_text => _('Active quick search text'),
    h_col_qs_active_text => _('Text colour for active quick search.'),
    l_col_qs_error_bg => _('Quick search error background'),
    h_col_qs_error_bg => _('Background colour for quick search error.'),
    l_col_qs_error_text => _('Quick search error text'),
    h_col_qs_error_text => _('Text colour for quick search error.'),

    l_col_diff_add => _('Added lines'),
    h_col_diff_add => _('Colour for added lines in patches.'),
    l_col_diff_del => _('Deleted lines'),
    h_col_diff_del => _('Colour for deleted lines in patches.'),
    l_col_diff_hunk => _('Hunk lines'),
    h_col_diff_hunk => _('Colour for hunk headers in patches.'),

    l_win_x => _('X position'),
    h_win_x => _('X coordinate for window\'s top-left corner.'),
    l_win_y => _('Y position'),
    h_win_y => _('Y coordinate for window\'s top-left corner.'),
    l_win_w => _('Width'),
    h_win_w => _('Window\'s width in pixels.'),
    l_win_h => _('Height'),
    h_win_h => _('Window\'s height in pixels.'),

    l_win_main_mx => _('Maximized'),
    h_win_main_mx => _('Changes window maximized status.'),
    l_win_main_fs => _('Full-screen'),
    h_win_main_fs => _('Changes full screen status.'),

    l_acc_gtls_set => _('Use custom GnuTLS priority'),
    h_acc_gtls_set => _('Enables using user provided GnuTLS priority string.'),
    l_acc_gtls_pri => _('GnuTLS priority'),
    h_acc_gtls_pri => _('Value to use as GnuTLS priority string if custom priority check is enabled. Otherwise this value is ignored.'),

    l_plu_gpg_alimit => _('Autocompletion limit'),
    h_plu_gpg_alimit => _('Limits the number of addresses obtained from keyring through autocompletion. Use 0 to get all matches.'),
    l_plu_lav_burl => _('Base URL'),
    h_plu_lav_burl => _('This is the URL where avatar requests are sent. You can use the one of your own libravatar server, if available.'),
    l_plu_prl_flvb => _('Log level'),
    h_plu_prl_flvb => _('Verbosity level of log, accumulative.'),
    l_plu_prl_none => _('None'),
    l_plu_prl_manual => _('Manual'),
    l_plu_prl_action => _('Actions'),
    l_plu_prl_match => _('Matches'),
);

# data and metadata of resource files
my $CONFIGDATA;
my $CONFIGMETA;
my $ACCOUNTDATA;
my $ACCOUNTMETA;
# all preferences read by load_preferences
my %PREFS = ();
my %ACPREFS = ();
my %PLPREFS = ();
# values of all preferences handled by clawsker
my %HPVALUE = ();
my %ACHPVALUE = ();
my %PLHPVALUE = ();
# default config dir and file name
my $ALTCONFIGDIR = FALSE;
my $CONFIGDIR = $ENV{HOME} . '/.claws-mail/';
my $CONFIGRC = 'clawsrc';
my $ACCOUNTRC = 'accountrc';
# supported and available plugins lists
my @PLUGINS = qw(AttRemover GPG ManageSieve Libravatar PerlPlugin);
my @AVPLUGINS = ();
# loaded hotkeys from load_menurc
my $HOTKEYS;
# loaded icons
my @APPICONS = ();

# index constants for preference arrays
use constant NAME  => 0; # the name on the rc file
use constant LABEL => 1; # the label on the GUI
use constant DESC  => 2; # the description for the hint/help
use constant TYPE  => 3; # data type: bool, int, float, string, color
use constant CMVER => 4; # lowest[,highest] Claws Mail version(s) the feature exists
use constant CMDEF => 5; # default value for the preference in Claws Mail
use constant PLUGIN => 6; # plugin section (only in plugin preferences)

# constants for GUI spacing
use constant HBOX_PAD => 5;
use constant FRAME_SPC => 2;
use constant PAGE_SPC => 5;

# version functions

sub version_greater_or_equal {
    my ($version, $refvers) = @_;
    return TRUE if (length($version) == 0 and length($refvers) >= 0);
    return FALSE if (length($version) >= 0 and length($refvers) == 0);
    return TRUE if (version->parse($version) >= version->parse($refvers));
    return FALSE;
}

sub get_claws_version {
    $_ = qx/which claws-mail/;
    chomp;
    return "" unless ($_); # not installed
    my $res = "";
    $_ = qx/$_ -v/;
    chomp;
    my @fver = split (/ /);
    die "Invalid version string" unless ($fver[2] eq "version");
    my @ver = split (/\./, $fver[3]);
    $res .= "$ver[0].";
    $res .= "$ver[1].";
    if ($ver[2] =~ /(\d+)git(\d+)/) {
        $res .= "$1.$2";
    }
    else {
        $res .= "$ver[2].0";
    }
    return $res;
}

# data handlers and auxiliar functions

sub handle_bool_value {
    my ($widget, $event, $dataref) = @_;
    $$dataref = ($widget->get_active ())? '1': '0';
}

sub handle_int_value {
    my ($widget, $event, $dataref) = @_;
    $_ = $widget->get_text ();
    s/^\s+//;
    s/\s+$//;
    if (/^[0-9]+$/) {
        $$dataref = $_;
        $widget->set_text ($_);
    }
    else {
        $widget->set_text ($$dataref);
    }
}

sub handle_string_value {
    my ($widget, $event, $dataref) = @_;
    $$dataref = $widget->get_text ();
}

sub handle_nchar_value {
    my ($widget, $event, $dataref, $minlen, $maxlen) = @_;
    $_ = substr ($widget->get_text (), 0, $maxlen);
    $widget->set_text ($_);
    $$dataref = $_;
}

sub gdk_color_from_str {
    my ($str) = @_;
    my ($rr, $gg, $bb) = (0, 0 ,0);
    $_ = uc ($str);
    if (/\#([A-F0-9][A-F0-9])([A-F0-9][A-F0-9])([A-F0-9][A-F0-9])/) {
        $rr = hex($1) * 256;
        $gg = hex($2) * 256;
        $bb = hex($3) * 256;
    }
    my $color = Gtk2::Gdk::Color->new ($rr, $gg, $bb);
    return $color;
}

sub str_from_gdk_color {
    my ($color) = @_;
    my $rr = $color->red / 256;
    my $gg = $color->green / 256;
    my $bb = $color->blue / 256;
    my $str = sprintf ("#%.2x%.2x%.2x", $rr, $gg, $bb);
    return $str;
}

sub handle_color_value {
    my ($widget, $event, $dataref) = @_;
    my $newcol = $widget->get_color;
    $$dataref = str_from_gdk_color ($newcol);
}

sub handle_selection_value {
    my ($widget, $event, $dataref) = @_;
    $$dataref = $widget->get_active;
}

sub get_rc_filename {
    return $CONFIGDIR . $CONFIGRC;
}

sub get_ac_rc_filename {
    return $CONFIGDIR . $ACCOUNTRC;
}

sub get_menurc_filename {
    return $CONFIGDIR . "menurc";
}

sub set_rc_filename {
    my ($fullname) = @_;
    my @parts = split ('/', $fullname);
    $CONFIGRC = $parts[$#parts];
    $parts[$#parts] = '';
    $CONFIGDIR = join ('/', @parts);
}

sub log_message {
    my ($mesg, $fatal) = @_;
    if (defined($fatal) && $fatal eq 'die') {
        die "$NAME: $mesg\n";
    }
    if ($VERBOSE) {
        print "$NAME: $mesg\n";
    }
}

sub error_dialog {
    my ($emsg) = @_;
    my $markup = "<span weight=\"bold\" size=\"large\">" . $emsg . "</span>";
    my $errordlg = Gtk2::MessageDialog->new_with_markup ($main_window, 'modal', 'error', 'cancel', $markup);
    $errordlg->set_title (_('Clawsker error'));
    $errordlg->run;
    $errordlg->destroy;
}

sub claws_is_running {
    my $emsg = _('Error: seems Claws Mail is currently running, close it first.');
    log_message ($emsg);
    error_dialog ($emsg);
    return FALSE;
}

sub check_claws_not_running {
    return TRUE if $READONLY;
    my $tmpdir = (defined $ENV{TMPDIR})? $ENV{TMPDIR}: '/tmp';
    $tmpdir = '/tmp' if ($tmpdir eq '');
    my $lockdir = "$tmpdir/claws-mail-$<";
    -d $lockdir and do {
        $_ = $CONFIGDIR;
        s/\/$//;
        my $socket = "$lockdir/" . md5_hex ($_);
        -S $socket and return claws_is_running ();
    };
    return TRUE;
}

sub check_rc_file {
    my ($rcfile) = @_;
    (defined($rcfile) && -f $rcfile) or do {
        my $emsg = _('Error: resource file for Claws Mail was not found.');
        log_message ($emsg);
        error_dialog ($emsg);
        return FALSE;
    };
    return TRUE;
}

sub set_widget_hint {
    if ($SHOWHINTS) {
        my ($wdgt, $hint) = @_;
        $wdgt->set_tooltip_text ($hint);
        $wdgt->set_has_tooltip (TRUE);
    }
}

sub set_widget_sens {
    my ($wdgt, $versions) = @_;
    my @ver = split(/,/, $versions);
    if ($#ver == 1) {
      $wdgt->set_sensitive (
        version_greater_or_equal ($CLAWSV, $ver[0])
        and version_greater_or_equal ($ver[1], $CLAWSV)
      );
    } else {
        $wdgt->set_sensitive (version_greater_or_equal ($CLAWSV, $ver[0]));
    }
}

# graphic element creation

sub new_hbox_spaced_pack {
    my $hbox = Gtk2::HBox->new (FALSE);
    foreach (@_) {
        $hbox->pack_start ($_, FALSE, FALSE, HBOX_PAD);
    }
    return $hbox;
}

sub new_check_button_for($$$) {
    my ($hash, $key, $vhash) = @_;
    my $name = $$hash{$key}[NAME];
    my $label = $$hash{$key}[LABEL];
    #
    my $cb = Gtk2::CheckButton->new ($label);
    my $value = $$vhash{$name};
    $value //= $$hash{$key}[CMDEF];
    $cb->set_active ($value eq '1');
    $cb->signal_connect (clicked => sub {
            my ($w, $e) = @_;
            handle_bool_value ($w, $e, \$$vhash{$name});
        });
    set_widget_hint ($cb, $$hash{$key}[DESC]);
    set_widget_sens ($cb, $$hash{$key}[CMVER]);
    #
    return new_hbox_spaced_pack ($cb);
}

sub new_text_box_for_int($$$) {
    my ($hash, $key, $vhash) = @_;
    my $name = $$hash{$key}[NAME];
    my $label = $$hash{$key}[LABEL];
    my @type = split (/,/, $$hash{$key}[TYPE]);
    push (@type, 0), push (@type, 10000) unless ($#type > 0);
    #
    my $gunits = undef;
    if (ref $label eq 'ARRAY') {
        $gunits = Gtk2::Label->new ($label->[1]);
        $label = $label->[0];
    }
    my $glabel = Gtk2::Label->new ($label);
    my $pagei = int (($type[2] - $type[1]) / 10);
    my $gentry = Gtk2::SpinButton->new_with_range ($type[1], $type[2], $pagei);
    my $value = $$vhash{$name};
    $value //= $$hash{$key}[CMDEF];
    $gentry->set_numeric (TRUE);
    $gentry->set_value ($value);
    $gentry->signal_connect('value-changed' => sub {
            my ($w, $e) = @_;
            handle_int_value ($w, $e, \$$vhash{$name});
        });
    set_widget_hint ($gentry, $$hash{$key}[DESC]);
    set_widget_sens ($gentry, $$hash{$key}[CMVER]);
    $glabel->set_sensitive ($gentry->sensitive);
    $gunits->set_sensitive ($gentry->sensitive) if ($gunits);
    #
    return new_hbox_spaced_pack ($glabel, $gentry, $gunits) if ($gunits);
    return new_hbox_spaced_pack ($glabel, $gentry);
}

sub new_text_box_for_nchar($$$) {
    my ($hash, $key, $vhash) = @_;
    my $name = $$hash{$key}[NAME];
    my $label = $$hash{$key}[LABEL];
    my @type = split (/,/, $$hash{$key}[TYPE]); # char,minlen,maxlen,width
    my $glabel = Gtk2::Label->new ($label);
    my $gentry = Gtk2::Entry->new ();
    $gentry->set_max_length($type[2]) if defined ($type[2]);
    my $width = $type[3];
    $width //= $type[2];
    $gentry->set_width_chars(int ($width) + 2) if defined ($width);
    my $value = $$vhash{$name};
    $value //= $$hash{$key}[CMDEF];
    $gentry->set_text ($value);
    $gentry->signal_connect('key-release-event' => sub {
            my ($w, $e) = @_;
            handle_nchar_value ($w, $e, \$$vhash{$name}, $type[1], $type[2]);
        });
    set_widget_hint ($gentry, $$hash{$key}[DESC]);
    set_widget_sens ($gentry, $$hash{$key}[CMVER]);
    $glabel->set_sensitive ($gentry->sensitive);
    #
    return new_hbox_spaced_pack ($glabel, $gentry);
}

sub new_color_button_for($$$) {
    my ($hash, $key, $vhash) = @_;
    my $name = $$hash{$key}[NAME];
    my $label = $$hash{$key}[LABEL];
    #
    my $value = $$vhash{$name};
    $value //= $$hash{$key}[CMDEF];
    my $col = gdk_color_from_str ($value);
    my $glabel = Gtk2::Label->new ($label);
    my $button = Gtk2::ColorButton->new_with_color ($col);
    $button->set_title ($label);
    $button->set_relief ('none');
    $button->signal_connect ('color-set' => sub {
            my ($w, $e) = @_;
            handle_color_value ($w, $e, \$$vhash{$name});
        });
    set_widget_hint ($button, $$hash{$key}[DESC]);
    set_widget_sens ($button, $$hash{$key}[CMVER]);
    $glabel->set_sensitive ($button->sensitive);
    #
    return new_hbox_spaced_pack ($button, $glabel);
}

sub new_selection_box_for($$$) {
    my ($hash, $key, $vhash) = @_;
    my $name = $$hash{$key}[NAME];
    my $label = $$hash{$key}[LABEL];
    #
    my $glabel = Gtk2::Label->new ($label);
    my $combo = Gtk2::ComboBox->new_text;
    my @options = split (';', $$hash{$key}[TYPE]);
    foreach my $opt (@options) {
        my ($index, $textkey) = split ('=', $opt);
        $combo->insert_text ($index, $xl::s{$textkey});
    }
    $combo->signal_connect ('changed' => sub {
            my ($w, $e) = @_;
            handle_selection_value ($w, $e, \$$vhash{$name});
        });
    my $value = $$vhash{$name};
    $value //= $$hash{$key}[CMDEF];
    $combo->set_active ($value);
    set_widget_hint ($combo, $$hash{$key}[DESC]);
    set_widget_sens ($combo, $$hash{$key}[CMVER]);
    $glabel->set_sensitive ($combo->sensitive);
    #
    return new_hbox_spaced_pack ($glabel, $combo);
}

# more graphic helpers

sub new_hbox_pack {
    my $hbox = Gtk2::HBox->new (FALSE);
    $hbox->set_border_width (PAGE_SPC);
    foreach (@_) {
        $hbox->pack_start ($_, FALSE, FALSE, 0);
    }
    return $hbox;
}

sub new_hbox_pack_compact {
    my $hbox = Gtk2::HBox->new (FALSE);
    $hbox->set_border_width (0);
    foreach (@_) {
        $hbox->pack_start ($_, FALSE, FALSE, 0);
    }
    return $hbox;
}

sub new_vbox_pack {
    my $vbox = Gtk2::VBox->new (FALSE, 5);
    $vbox->set_border_width (PAGE_SPC);
    foreach (@_) {
        $vbox->pack_start ($_, FALSE, FALSE, 0);
    }
    return $vbox;
}

sub new_vbox_pack_compact {
    my $vbox = Gtk2::VBox->new (FALSE, 0);
    $vbox->set_border_width (0);
    foreach (@_) {
        $vbox->pack_start ($_, FALSE, FALSE, 0);
    }
    return $vbox;
}

sub new_subpage_frame {
    my ($box, $title, $notpacked) = @_;
    my $frame = Gtk2::Frame->new ($title);
    $frame->add ($box);
    return new_vbox_pack ($frame) unless defined ($notpacked);
    return $frame;
}

# preference maps and corresponding page creation subs

%pr::oth = ( # other preferences
    use_dlg => [
        'addressbook_use_editaddress_dialog',
        $xl::s{l_oth_use_dlg},
        $xl::s{h_oth_use_dlg},
        'bool',
        '2.7.0',
        '0',
    ],
    max_use => [
        'cache_max_mem_usage',
        [ $xl::s{l_oth_max_use}, $xl::s{l_oth_max_use_units} ],
        $xl::s{h_oth_max_use},
        'int,0,262144', # 0 Kb - 256 Mb
        '0.7.8.36',
        '4096',
    ],
    min_time => [
        'cache_min_keep_time',
        [ $xl::s{l_oth_min_time}, $xl::s{l_oth_min_time_units} ],
        $xl::s{h_oth_min_time},
        'int,0,120', # 0 minutes - 2 hours
        '0.7.8.36',
        '15',
    ],
    use_netm => [
        'use_networkmanager',
        $xl::s{l_oth_use_netm},
        $xl::s{h_oth_use_netm},
        'bool',
        '3.3.1',
        '1',
    ],
    mp_rounds => [
        'master_passphrase_pbkdf2_rounds',
        $xl::s{l_oth_mp_rounds},
        $xl::s{h_oth_mp_rounds},
        'int,50000,1000000',
        '3.13.2.110',
        '50000',
    ],
);

sub new_other_page() {
    return new_vbox_pack (
               new_subpage_frame (
                   new_vbox_pack (
                       new_check_button_for(\%pr::oth, 'use_dlg', \%HPVALUE)),
                   $xl::s{ab_frame}, 'not-packed'),
               new_subpage_frame (
                   new_vbox_pack (
                       new_text_box_for_int(\%pr::oth, 'max_use', \%HPVALUE),
                       new_text_box_for_int(\%pr::oth, 'min_time', \%HPVALUE)),
                   $xl::s{mem_frame}, 'not-packed'),
               new_subpage_frame (
                   new_vbox_pack (
                       new_check_button_for(\%pr::oth, 'use_netm', \%HPVALUE)),
                   $xl::s{netm_frame}, 'not-packed'),
               new_subpage_frame (
                   new_vbox_pack (
                       new_text_box_for_int(\%pr::oth, 'mp_rounds', \%HPVALUE)),
                   $xl::s{mpass_frame}, 'not-packed')
           );
}

%pr::gui = ( # gui bells and whistles
    b_unread => [
        'bold_unread',
        $xl::s{l_gui_b_unread},
        $xl::s{h_gui_b_unread},
        'bool',
        '0.5.3',
        '1',
    ],
    no_markup => [
        'compose_no_markup',
        $xl::s{l_gui_no_markup},
        $xl::s{h_gui_no_markup},
        'bool',
        '2.1.0.16',
        '0',
    ],
    dot_lines => [
        'enable_dotted_lines',
        $xl::s{l_gui_dot_lines},
        $xl::s{h_gui_dot_lines},
        'bool',
        '2.4.0.115,3.7.10.44',
        '0',
    ],
    h_scroll => [
        'enable_hscrollbar',
        $xl::s{l_gui_h_scroll},
        $xl::s{h_gui_h_scroll},
        'bool',
        '0.8.6.18',
        '1',
    ],
    swp_from => [
        'enable_swap_from',
        $xl::s{l_gui_swp_from},
        $xl::s{h_gui_swp_from},
        'bool',
        '1.9.13.40',
        '0',
    ],
    v_scroll => [
        'folderview_vscrollbar_policy',
        $xl::s{l_gui_v_scroll},
        $xl::s{h_gui_v_scroll},
        '0=l_gui_v_scroll_show;1=l_gui_v_scroll_auto;2=l_gui_v_scroll_hide',
        '0.7.8.14',
        '0',
    ],
    from_show => [
        'summary_from_show',
        $xl::s{l_gui_from_show},
        $xl::s{h_gui_from_show},
        '0=l_gui_from_show_name;1=l_gui_from_show_addr;2=l_gui_from_show_both',
        '3.7.10',
        '0',
    ],
    strip_off => [
        'stripes_color_offset',
        $xl::s{l_gui_strip_off},
        $xl::s{h_gui_strip_off},
        'int,0,40000', # no idea what this number means
        '2.4.0.186',
        '4000',
    ],
    cursor_v => [
        'textview_cursor_visible',
        $xl::s{l_gui_cursor_v},
        $xl::s{h_gui_cursor_v},
        'bool',
        '0.0.0',
        '0',
    ],
    toolbar_d => [
        'toolbar_detachable',
        $xl::s{l_gui_toolbar_d},
        $xl::s{h_gui_toolbar_d},
        'bool',
        '0.0.0',
        '0',
    ],
    strip_all => [
        'use_stripes_everywhere',
        $xl::s{l_gui_strip_all},
        $xl::s{h_gui_strip_all},
        'bool',
        '0.0.0',
        '1',
    ],
    strip_sum => [
        'use_stripes_in_summaries',
        $xl::s{l_gui_strip_sum},
        $xl::s{h_gui_strip_sum},
        'bool',
        '0.0.0',
        '1',
    ],
    two_linev => [
        'two_line_vertical',
        $xl::s{l_gui_two_line_v},
        $xl::s{h_gui_two_line_v},
        'bool',
        '3.4.0.7',
        '0',
    ],
    margin_co => [
        'show_compose_margin',
        $xl::s{l_gui_margin_co},
        $xl::s{h_gui_margin_co},
        'bool',
        '3.7.6.7',
        '0',
    ],
    mview_date => [
        'msgview_date_format',
        $xl::s{l_gui_mview_date},
        $xl::s{h_gui_mview_date},
        'bool',
        '3.7.8.42',
        '0',
    ],
    zero_char => [
        'zero_replacement_char',
        $xl::s{l_gui_zero_char},
        $xl::s{h_gui_zero_char},
        'char,1,1',
        '2.8.1.77',
        '0',
    ],
    type_any => [
        'type_any_header',
        $xl::s{l_gui_type_any},
        $xl::s{h_gui_type_any},
        'bool',
        '3.12.0.44',
        '0',
    ],
    warn_send_multi => [
        'warn_sending_many_recipients_num',
        [ $xl::s{l_gui_warn_send_multi}, $xl::s{l_gui_warn_send_multi_units} ],
        $xl::s{h_gui_warn_send_multi},
        'int,0,1000',
        '3.14.1.125',
        '0',
    ],
    next_del => [
        'next_on_delete',
        $xl::s{l_gui_next_del},
        $xl::s{h_gui_next_del},
        'bool',
        '3.13.0.5',
        '0',
    ],
);

sub new_gui_page() {
    my $gf = Gtk2::VBox->new (FALSE, 5);
    $gf->set_border_width (PAGE_SPC);

    my $cb_dot_lines = new_check_button_for (\%pr::gui, 'dot_lines', \%HPVALUE);
    my $cb_toolbar_d = new_check_button_for (\%pr::gui, 'toolbar_d', \%HPVALUE);
    my $tb_zero_char = new_text_box_for_nchar (\%pr::gui, 'zero_char', \%HPVALUE);

    $gf->pack_start (new_subpage_frame (
                         new_vbox_pack (
                             new_check_button_for (\%pr::gui, 'strip_all', \%HPVALUE),
                             new_check_button_for (\%pr::gui, 'strip_sum', \%HPVALUE),
                             new_text_box_for_int (\%pr::gui, 'strip_off', \%HPVALUE)),
                         $xl::s{stripes_frame}, 'not-packed'),
                     FALSE, FALSE, FRAME_SPC);
    $gf->pack_start (new_subpage_frame (
                         new_vbox_pack (
                             new_check_button_for (\%pr::gui, 'b_unread', \%HPVALUE),
                             new_check_button_for (\%pr::gui, 'swp_from', \%HPVALUE),
                             new_check_button_for (\%pr::gui, 'two_linev', \%HPVALUE),
                             new_check_button_for (\%pr::gui, 'next_del', \%HPVALUE),
                             new_selection_box_for (\%pr::gui, 'from_show', \%HPVALUE)),
                         $xl::s{mlist_frame}, 'not-packed'),
                     FALSE, FALSE, FRAME_SPC);
    $gf->pack_start (new_subpage_frame (
                         new_hbox_pack (
                             new_check_button_for (\%pr::gui, 'cursor_v', \%HPVALUE),
                             new_check_button_for (\%pr::gui, 'mview_date', \%HPVALUE)),
                         $xl::s{mview_frame}, 'not-packed'),
                     FALSE, FALSE, FRAME_SPC);
    $gf->pack_start (new_subpage_frame (
                         new_vbox_pack (
                             new_hbox_pack_compact (
                                 new_check_button_for (\%pr::gui, 'no_markup', \%HPVALUE),
                                 new_check_button_for (\%pr::gui, 'margin_co', \%HPVALUE),
                                 new_check_button_for (\%pr::gui, 'type_any', \%HPVALUE)),
                             new_text_box_for_int (\%pr::gui, 'warn_send_multi', \%HPVALUE)),
                         $xl::s{compo_frame}, 'not-packed'),
                     FALSE, FALSE, FRAME_SPC);
    $gf->pack_start ($cb_dot_lines, FALSE, FALSE, 0);
    $gf->pack_start ($cb_toolbar_d, FALSE, FALSE, 0);
    $gf->pack_start (new_subpage_frame (
                         new_vbox_pack (
                             new_check_button_for (\%pr::gui, 'h_scroll', \%HPVALUE),
                             new_selection_box_for (\%pr::gui, 'v_scroll', \%HPVALUE)),
                         $xl::s{sbar_frame}, 'not-packed'),
                     FALSE, FALSE, FRAME_SPC);
    $gf->pack_start ($tb_zero_char, FALSE, FALSE, 0);

    return $gf;
}

%pr::beh = ( # tweak some behaviour
    hover_t => [
        'hover_timeout',
        [ $xl::s{l_beh_hover_t}, $xl::s{l_beh_hover_t_units} ],
        $xl::s{h_beh_hover_t},
        'int,100,3000', # 0.1 seconds - 3 seconds
        '0.0.0',
        '500',
    ],
    dangerous => [
        'live_dangerously',
        $xl::s{l_beh_dangerous},
        $xl::s{h_beh_dangerous},
        'bool',
        '0.0.0',
        '0',
    ],
    flowed => [
        'respect_flowed_format',
        $xl::s{l_beh_flowed},
        $xl::s{h_beh_flowed},
        'bool',
        '0.0.0',
        '0',
    ],
    parts_rw => [
        'save_parts_readwrite',
        $xl::s{l_beh_parts_rw},
        $xl::s{h_beh_parts_rw},
        'bool',
        '0.0.0',
        '0',
    ],
    skip_ssl => [
        'skip_ssl_cert_check',
        $xl::s{l_beh_skip_ssl},
        $xl::s{h_beh_skip_ssl},
        'bool',
        '0.0.0',
        '0',
    ],
    up_step => [
        'statusbar_update_step',
        [ $xl::s{l_beh_up_step}, $xl::s{l_beh_up_step_units} ],
        $xl::s{h_beh_up_step},
        'int,1,200', # 1 item - 200 items
        '0.0.0',
        '10',
    ],
    thread_a => [
        'thread_by_subject_max_age',
        [ $xl::s{l_beh_thread_a}, $xl::s{l_beh_thread_a_units} ],
        $xl::s{h_beh_thread_a},
        'int,1,30', # 1 day - 30 days
        '0.0.0',
        '10',
    ],
    unsafe_ssl => [
        'unsafe_ssl_certs',
        $xl::s{l_beh_unsafe_ssl},
        $xl::s{h_beh_unsafe_ssl},
        'bool',
        '0.0.0',
        '0',
    ],
    use_utf8 => [
        'utf8_instead_of_locale_for_broken_mail',
        $xl::s{l_beh_use_utf8},
        $xl::s{h_beh_use_utf8},
        'bool',
        '1.9.14.49',
        '0',
    ],
    warn_dnd => [
        'warn_dnd',
        $xl::s{l_beh_warn_dnd},
        $xl::s{h_beh_warn_dnd},
        'bool',
        '0.0.0',
        '1',
    ],
    out_ascii => [
        'outgoing_fallback_to_ascii',
        $xl::s{l_beh_out_ascii},
        $xl::s{h_beh_out_ascii},
        'bool',
        '3.4.0.37',
        '1',
    ],
    pp_unsel => [
        'primary_paste_unselects',
        $xl::s{l_beh_pp_unsel},
        $xl::s{h_beh_pp_unsel},
        'bool',
        '3.6.1.35',
        '0',
    ],
    inline_at => [
        'show_inline_attachments',
        $xl::s{l_beh_inline_at},
        $xl::s{h_beh_inline_at},
        'bool',
        '3.7.8.48',
        '1',
    ],
    addr_swc => [
        'address_search_wildcard',
        $xl::s{l_beh_addr_swc},
        $xl::s{h_beh_addr_swc},
        'bool',
        '3.9.3.18',
        '0',
    ],
    fold_swc => [
        'folder_search_wildcard',
        $xl::s{l_beh_fold_swc},
        $xl::s{h_beh_fold_swc},
        'bool',
        '3.9.3.18',
        '0',
    ],
    rewrite_ff => [
        'rewrite_first_from',
        $xl::s{l_beh_rewrite_ff},
        $xl::s{h_beh_rewrite_ff},
        'bool',
        '3.14.0.94',
        '0',
    ],
);

sub new_behaviour_page() {
    my $bf = Gtk2::VBox->new (FALSE, 5);
    $bf->set_border_width (PAGE_SPC);

    my $tb_up_step = new_text_box_for_int (\%pr::beh, 'up_step', \%HPVALUE);
    my $tb_thread_a = new_text_box_for_int (\%pr::beh, 'thread_a', \%HPVALUE);

    $bf->pack_start (new_subpage_frame (
                         new_vbox_pack (
                             new_text_box_for_int (\%pr::beh, 'hover_t', \%HPVALUE),
                             new_check_button_for (\%pr::beh, 'warn_dnd', \%HPVALUE)),
                         $xl::s{dnd_frame}, 'not-packed'),
                     FALSE, FALSE, FRAME_SPC);
    $bf->pack_start (new_subpage_frame (
                         new_hbox_pack (
                             new_check_button_for (\%pr::beh, 'skip_ssl', \%HPVALUE),
                             new_check_button_for (\%pr::beh, 'unsafe_ssl', \%HPVALUE)),
                         $xl::s{ssl_frame}, 'not-packed'),
                     FALSE, FALSE, FRAME_SPC);
    $bf->pack_start ($tb_up_step, FALSE, FALSE, 0);
    $bf->pack_start ($tb_thread_a, FALSE, FALSE, 0);
    $bf->pack_start (new_subpage_frame (
                         new_vbox_pack (
                             new_check_button_for (\%pr::beh, 'flowed', \%HPVALUE),
                             new_check_button_for (\%pr::beh, 'parts_rw', \%HPVALUE),
                             new_check_button_for (\%pr::beh, 'use_utf8', \%HPVALUE),
                             new_check_button_for (\%pr::beh, 'dangerous', \%HPVALUE),
                             new_check_button_for (\%pr::beh, 'out_ascii', \%HPVALUE),
                             new_check_button_for (\%pr::beh, 'pp_unsel', \%HPVALUE),
                             new_check_button_for (\%pr::beh, 'inline_at', \%HPVALUE),
                             new_check_button_for (\%pr::beh, 'rewrite_ff', \%HPVALUE)),
                         $xl::s{msgs_frame}, 'not-packed'),
                     FALSE, FALSE, FRAME_SPC);
    $bf->pack_start (new_subpage_frame (
                         new_vbox_pack (
                             new_check_button_for (\%pr::beh, 'addr_swc', \%HPVALUE),
                             new_check_button_for (\%pr::beh, 'fold_swc', \%HPVALUE)),
                         $xl::s{swc_frame}, 'not-packed'),
                     FALSE, FALSE, FRAME_SPC);
    return $bf;
}

%pr::col = ( # a variety of colours
    emphasis => [
        'emphasis_color',
        $xl::s{l_col_emphasis},
        $xl::s{h_col_emphasis},
        'color',
        '0.0.0',
        '#0000cf',
    ],
    log_err => [
        'log_error_color',
        $xl::s{l_col_log_err},
        $xl::s{h_col_log_err},
        'color',
        '0.0.0',
        '#af0000',
    ],
    log_in => [
        'log_in_color',
        $xl::s{l_col_log_in},
        $xl::s{h_col_log_in},
        'color',
        '0.0.0',
        '#000000',
    ],
    log_msg => [
        'log_msg_color',
        $xl::s{l_col_log_msg},
        $xl::s{h_col_log_msg},
        'color',
        '0.0.0',
        '#00af00',
    ],
    log_out => [
        'log_out_color',
        $xl::s{l_col_log_out},
        $xl::s{h_col_log_out},
        'color',
        '0.0.0',
        '#0000ef',
    ],
    log_warn => [
        'log_warn_color',
        $xl::s{l_col_log_warn},
        $xl::s{h_col_log_warn},
        'color',
        '0.0.0',
        '#af0000',
    ],
    diff_add => [
        'diff_added_color',
        $xl::s{l_col_diff_add},
        $xl::s{h_col_diff_add},
        'color',
        '3.8.0.54',
        '#008b8b',
    ],
    diff_del => [
        'diff_deleted_color',
        $xl::s{l_col_diff_del},
        $xl::s{h_col_diff_del},
        'color',
        '3.8.0.54',
        '#6a5acd',
    ],
    diff_hunk => [
        'diff_hunk_color',
        $xl::s{l_col_diff_hunk},
        $xl::s{h_col_diff_hunk},
        'color',
        '3.8.0.54',
        '#a52a2a',
    ],
    tags_bg => [
        'tags_bgcolor',
        $xl::s{l_col_tags_bg},
        $xl::s{h_col_tags_bg},
        'color',
        '3.14.1.31',
        '#f5f6be',
    ],
    tags_text => [
        'tags_color',
        $xl::s{l_col_tags_text},
        $xl::s{h_col_tags_text},
        'color',
        '3.14.1.31',
        '#000000',
    ],
    default_header_bg => [
        'default_header_bgcolor',
        $xl::s{l_col_default_header_bg},
        $xl::s{h_col_default_header_bg},
        'color',
        '3.14.1.31',
        '#f5f6be',
    ],
    default_header_text => [
        'default_header_color',
        $xl::s{l_col_default_header_text},
        $xl::s{h_col_default_header_text},
        'color',
        '3.14.1.31',
        '#000000',
    ],
    qs_active_bg => [
        'qs_active_bgcolor',
        $xl::s{l_col_qs_active_bg},
        $xl::s{h_col_qs_active_bg},
        'color',
        '3.14.1.31',
        '#f5f6be',
    ],
    qs_active_text => [
        'qs_active_color',
        $xl::s{l_col_qs_active_text},
        $xl::s{h_col_qs_active_text},
        'color',
        '3.14.1.31',
        '#000000',
    ],
    qs_error_bg => [
        '',
        $xl::s{l_col_qs_error_bg},
        $xl::s{h_col_qs_error_bg},
        'qs_error_bgcolor',
        '3.14.1.31',
        '#ff7070',
    ],
    qs_error_text => [
        '',
        $xl::s{l_col_qs_error_text},
        $xl::s{h_col_qs_error_text},
        'qs_error_color',
        '3.14.1.31',
        '#000000',
    ],
);

sub new_colours_page() {
    return new_vbox_pack (
               new_subpage_frame (
                   new_vbox_pack (
                       new_color_button_for (\%pr::col, 'emphasis', \%HPVALUE),
                       new_hbox_pack_compact (
                           new_color_button_for (\%pr::col, 'tags_text', \%HPVALUE),
                           new_color_button_for (\%pr::col, 'tags_bg', \%HPVALUE))),
                   $xl::s{msgview_frame}, 'not-packed'),
               new_subpage_frame (
                   new_hbox_pack (
                       new_vbox_pack_compact (
                           new_color_button_for (\%pr::col, 'log_err', \%HPVALUE),
                           new_color_button_for (\%pr::col, 'log_warn', \%HPVALUE),
                           new_color_button_for (\%pr::col, 'log_msg', \%HPVALUE)),
                       new_vbox_pack_compact (
                           new_color_button_for (\%pr::col, 'log_in', \%HPVALUE),
                           new_color_button_for (\%pr::col, 'log_out', \%HPVALUE))),
                   $xl::s{log_frame}, 'not-packed'),
               new_subpage_frame (
                   new_vbox_pack (
                       new_color_button_for (\%pr::col, 'diff_add', \%HPVALUE),
                       new_color_button_for (\%pr::col, 'diff_del', \%HPVALUE),
                       new_color_button_for (\%pr::col, 'diff_hunk', \%HPVALUE)),
                   $xl::s{diff_frame}, 'not-packed'),
               new_subpage_frame (
                   new_hbox_pack (
                       new_color_button_for (\%pr::col, 'default_header_text', \%HPVALUE),
                       new_color_button_for (\%pr::col, 'default_header_bg', \%HPVALUE)),
                   $xl::s{compose_frame}, 'not-packed'),
               new_subpage_frame (
                   new_hbox_pack (
                       new_vbox_pack_compact (
                           new_color_button_for (\%pr::col, 'qs_active_text', \%HPVALUE),
                           new_color_button_for (\%pr::col, 'qs_error_text', \%HPVALUE)),
                       new_vbox_pack_compact (
                           new_color_button_for (\%pr::col, 'qs_active_bg', \%HPVALUE),
                           new_color_button_for (\%pr::col, 'qs_error_bg', \%HPVALUE))),
                   $xl::s{qs_frame}, 'not-packed')
           );
}

%pr::win = ( # tweak window positions and/or sizes
    main_x => [
        'mainwin_x',
        $xl::s{l_win_x},
        $xl::s{h_win_x},
        'int,0,3000', # 0 pixels - 3000 pixels
        '0.0.0',
        '16',
    ],
    main_y => [
        'mainwin_y',
        $xl::s{l_win_y},
        $xl::s{h_win_y},
        'int,0,3000', # 0 pixels - 3000 pixels
        '0.0.0',
        '16',
    ],
    main_w => [
        'mainwin_width',
        $xl::s{l_win_w},
        $xl::s{h_win_w},
        'int,0,3000', # 0 pixels - 3000 pixels
        '0.0.0',
        '779',
    ],
    main_h => [
        'mainwin_height',
        $xl::s{l_win_h},
        $xl::s{h_win_h},
        'int,0,3000', # 0 pixels - 3000 pixels
        '0.0.0',
        '568',
    ],
    main_mx => [
        'mainwin_maximised',
        $xl::s{l_win_main_mx},
        $xl::s{h_win_main_mx},
        'bool',
        '0.0.0',
        '0',
    ],
    main_fs => [
        'mainwin_fullscreen',
        $xl::s{l_win_main_fs},
        $xl::s{h_win_main_fs},
        'bool',
        '0.0.0',
        '0',
    ],
    msgs_x => [
        'main_messagewin_x',
        $xl::s{l_win_x},
        $xl::s{h_win_x},
        'int,0,3000', # 0 pixels - 3000 pixels
        '0.0.0',
        '256',
    ],
    msgs_y => [
        'main_messagewin_y',
        $xl::s{l_win_y},
        $xl::s{h_win_y},
        'int,0,3000', # 0 pixels - 3000 pixels
        '0.0.0',
        '210',
    ],
    msgs_w => [
        'messagewin_width',
        $xl::s{l_win_w},
        $xl::s{h_win_w},
        'int,0,3000', # 0 pixels - 3000 pixels
        '0.0.0',
        '600',
    ],
    msgs_h => [
        'messagewin_height',
        $xl::s{l_win_h},
        $xl::s{h_win_h},
        'int,0,3000', # 0 pixels - 3000 pixels
        '0.0.0',
        '540',
    ],
    send_w => [
        'sendwin_width',
        $xl::s{l_win_w},
        $xl::s{h_win_w},
        'int,0,3000', # 0 pixels - 3000 pixels
        '0.0.0',
        '460',
    ],
    send_h => [
        'sendwin_height',
        $xl::s{l_win_h},
        $xl::s{h_win_h},
        'int,0,3000', # 0 pixels - 3000 pixels
        '0.0.0',
        '-1',
    ],
    recv_w => [
        'receivewin_width',
        $xl::s{l_win_w},
        $xl::s{h_win_w},
        'int,0,3000', # 0 pixels - 3000 pixels
        '0.0.0',
        '460',
    ],
    recv_h => [
        'receivewin_height',
        $xl::s{l_win_h},
        $xl::s{h_win_h},
        'int,0,3000', # 0 pixels - 3000 pixels
        '0.0.0',
        '-1',
    ],
    fold_x => [
        'folderwin_x',
        $xl::s{l_win_x},
        $xl::s{h_win_x},
        'int,0,3000', # 0 pixels - 3000 pixels
        '0.0.0',
        '16',
    ],
    fold_y => [
        'folderwin_y',
        $xl::s{l_win_y},
        $xl::s{h_win_y},
        'int,0,3000', # 0 pixels - 3000 pixels
        '0.0.0',
        '16',
    ],
    fold_w => [
        'folderitemwin_width',
        $xl::s{l_win_w},
        $xl::s{h_win_w},
        'int,0,3000', # 0 pixels - 3000 pixels
        '0.0.0',
        '500',
    ],
    fold_h => [
        'folderitemwin_height',
        $xl::s{l_win_h},
        $xl::s{h_win_h},
        'int,0,3000', # 0 pixels - 3000 pixels
        '0.0.0',
        '-1',
    ],
    fsel_w => [
        'folderselwin_width',
        $xl::s{l_win_w},
        $xl::s{h_win_w},
        'int,0,3000', # 0 pixels - 3000 pixels
        '0.0.0',
        '300',
    ],
    fsel_h => [
        'folderselwin_height',
        $xl::s{l_win_h},
        $xl::s{h_win_h},
        'int,0,3000', # 0 pixels - 3000 pixels
        '0.0.0',
        '-1',
    ],
    sour_w => [
        'sourcewin_width',
        $xl::s{l_win_w},
        $xl::s{h_win_w},
        'int,0,3000', # 0 pixels - 3000 pixels
        '0.0.0',
        '600',
    ],
    sour_h => [
        'sourcewin_height',
        $xl::s{l_win_h},
        $xl::s{h_win_h},
        'int,0,3000', # 0 pixels - 3000 pixels
        '0.0.0',
        '500',
    ],
    addr_w => [
        'addressbookwin_width',
        $xl::s{l_win_w},
        $xl::s{h_win_w},
        'int,0,3000', # 0 pixels - 3000 pixels
        '0.0.0',
        '520',
    ],
    addr_h => [
        'addressbookwin_height',
        $xl::s{l_win_h},
        $xl::s{h_win_h},
        'int,0,3000', # 0 pixels - 3000 pixels
        '0.0.0',
        '-1',
    ],
    adep_w => [
        'addressbookeditpersonwin_width',
        $xl::s{l_win_w},
        $xl::s{h_win_w},
        'int,0,3000', # 0 pixels - 3000 pixels
        '0.0.0',
        '640',
    ],
    adep_h => [
        'addressbookeditpersonwin_height',
        $xl::s{l_win_h},
        $xl::s{h_win_h},
        'int,0,3000', # 0 pixels - 3000 pixels
        '0.0.0',
        '320',
    ],
    adeg_w => [
        'addressbookeditgroupwin_width',
        $xl::s{l_win_w},
        $xl::s{h_win_w},
        'int,0,3000', # 0 pixels - 3000 pixels
        '0.0.0',
        '580',
    ],
    adeg_h => [
        'addressbookeditgroupwin_height',
        $xl::s{l_win_h},
        $xl::s{h_win_h},
        'int,0,3000', # 0 pixels - 3000 pixels
        '0.0.0',
        '340',
    ],
    adda_w => [
        'addressaddwin_width',
        $xl::s{l_win_w},
        $xl::s{h_win_w},
        'int,0,3000', # 0 pixels - 3000 pixels
        '0.0.0',
        '300',
    ],
    adda_h => [
        'addressaddwin_height',
        $xl::s{l_win_h},
        $xl::s{h_win_h},
        'int,0,3000', # 0 pixels - 3000 pixels
        '0.0.0',
        '-1',
    ],
    addf_w => [
        'addressbook_folderselwin_width',
        $xl::s{l_win_w},
        $xl::s{h_win_w},
        'int,0,3000', # 0 pixels - 3000 pixels
        '0.0.0',
        '300',
    ],
    addf_h => [
        'addressbook_folderselwin_height',
        $xl::s{l_win_h},
        $xl::s{h_win_h},
        'int,0,3000', # 0 pixels - 3000 pixels
        '0.0.0',
        '-1',
    ],
    acce_w => [
        'editaccountwin_width',
        $xl::s{l_win_w},
        $xl::s{h_win_w},
        'int,0,3000', # 0 pixels - 3000 pixels
        '0.0.0',
        '500',
    ],
    acce_h => [
        'editaccountwin_height',
        $xl::s{l_win_h},
        $xl::s{h_win_h},
        'int,0,3000', # 0 pixels - 3000 pixels
        '0.0.0',
        '-1',
    ],
    acco_w => [
        'accountswin_width',
        $xl::s{l_win_w},
        $xl::s{h_win_w},
        'int,0,3000', # 0 pixels - 3000 pixels
        '0.0.0',
        '500',
    ],
    acco_h => [
        'accountswin_height',
        $xl::s{l_win_h},
        $xl::s{h_win_h},
        'int,0,3000', # 0 pixels - 3000 pixels
        '0.0.0',
        '-1',
    ],
    filt_w => [
        'filteringwin_width',
        $xl::s{l_win_w},
        $xl::s{h_win_w},
        'int,0,3000', # 0 pixels - 3000 pixels
        '0.0.0',
        '500',
    ],
    filt_h => [
        'filteringwin_height',
        $xl::s{l_win_h},
        $xl::s{h_win_h},
        'int,0,3000', # 0 pixels - 3000 pixels
        '0.0.0',
        '-1',
    ],
    fila_w => [
        'filteringactionwin_width',
        $xl::s{l_win_w},
        $xl::s{h_win_w},
        'int,0,3000', # 0 pixels - 3000 pixels
        '0.0.0',
        '490',
    ],
    fila_h => [
        'filteringactionwin_height',
        $xl::s{l_win_h},
        $xl::s{h_win_h},
        'int,0,3000', # 0 pixels - 3000 pixels
        '0.0.0',
        '-1',
    ],
    fild_w => [
        'filtering_debugwin_width',
        $xl::s{l_win_w},
        $xl::s{h_win_w},
        'int,0,3000', # 0 pixels - 3000 pixels
        '0.0.0',
        '600',
    ],
    fild_h => [
        'filtering_debugwin_height',
        $xl::s{l_win_h},
        $xl::s{h_win_h},
        'int,0,3000', # 0 pixels - 3000 pixels
        '0.0.0',
        '-1',
    ],
    matc_w => [
        'matcherwin_width',
        $xl::s{l_win_w},
        $xl::s{h_win_w},
        'int,0,3000', # 0 pixels - 3000 pixels
        '0.0.0',
        '520',
    ],
    matc_h => [
        'matcherwin_height',
        $xl::s{l_win_h},
        $xl::s{h_win_h},
        'int,0,3000', # 0 pixels - 3000 pixels
        '0.0.0',
        '-1',
    ],
    pref_w => [
        'prefswin_width',
        $xl::s{l_win_w},
        $xl::s{h_win_w},
        'int,0,3000', # 0 pixels - 3000 pixels
        '0.0.0',
        '600',
    ],
    pref_h => [
        'prefswin_height',
        $xl::s{l_win_h},
        $xl::s{h_win_h},
        'int,0,3000', # 0 pixels - 3000 pixels
        '0.0.0',
        '-1',
    ],
    temp_w => [
        'templateswin_width',
        $xl::s{l_win_w},
        $xl::s{h_win_w},
        'int,0,3000', # 0 pixels - 3000 pixels
        '0.0.0',
        '480',
    ],
    temp_h => [
        'templateswin_height',
        $xl::s{l_win_h},
        $xl::s{h_win_h},
        'int,0,3000', # 0 pixels - 3000 pixels
        '0.0.0',
        '-1',
    ],
    acti_w => [
        'actionswin_width',
        $xl::s{l_win_w},
        $xl::s{h_win_w},
        'int,0,3000', # 0 pixels - 3000 pixels
        '0.0.0',
        '486',
    ],
    acti_h => [
        'actionswin_height',
        $xl::s{l_win_h},
        $xl::s{h_win_h},
        'int,0,3000', # 0 pixels - 3000 pixels
        '0.0.0',
        '-1',
    ],
    tags_w => [
        'tagswin_width',
        $xl::s{l_win_w},
        $xl::s{h_win_w},
        'int,0,3000', # 0 pixels - 3000 pixels
        '0.0.0',
        '486',
    ],
    tags_h => [
        'tagswin_height',
        $xl::s{l_win_h},
        $xl::s{h_win_h},
        'int,0,3000', # 0 pixels - 3000 pixels
        '0.0.0',
        '-1',
    ],
    plug_w => [
        'pluginswin_width',
        $xl::s{l_win_w},
        $xl::s{h_win_w},
        'int,0,3000', # 0 pixels - 3000 pixels
        '0.0.0',
        '-1',
    ],
    plug_h => [
        'pluginswin_height',
        $xl::s{l_win_h},
        $xl::s{h_win_h},
        'int,0,3000', # 0 pixels - 3000 pixels
        '0.0.0',
        '-1',
    ],
    logw_w => [
        'logwin_width',
        $xl::s{l_win_w},
        $xl::s{h_win_w},
        'int,0,3000', # 0 pixels - 3000 pixels
        '0.0.0',
        '520',
    ],
    logw_h => [
        'logwin_height',
        $xl::s{l_win_h},
        $xl::s{h_win_h},
        'int,0,3000', # 0 pixels - 3000 pixels
        '0.0.0',
        '-1',
    ],
    prin_w => [
        'print_previewwin_width',
        $xl::s{l_win_w},
        $xl::s{h_win_w},
        'int,0,3000', # 0 pixels - 3000 pixels
        '0.0.0',
        '600',
    ],
    prin_h => [
        'print_previewwin_height',
        $xl::s{l_win_h},
        $xl::s{h_win_h},
        'int,0,3000', # 0 pixels - 3000 pixels
        '0.0.0',
        '-1',
    ],
);

sub new_winpos_subpage_main() {
    return new_subpage_frame (
               new_vbox_pack_compact (
                   new_vbox_pack (
                       new_text_box_for_int (\%pr::win, 'main_x', \%HPVALUE),
                       new_text_box_for_int (\%pr::win, 'main_y', \%HPVALUE)),
                   new_hbox_pack (
                       new_text_box_for_int (\%pr::win, 'main_w', \%HPVALUE),
                       new_text_box_for_int (\%pr::win, 'main_h', \%HPVALUE)),
                   new_vbox_pack (
                       new_check_button_for (\%pr::win, 'main_fs', \%HPVALUE),
                       new_check_button_for (\%pr::win, 'main_mx', \%HPVALUE))),
               _('Main window')
           );
}

sub new_winpos_subpage_msgs() {
    return new_subpage_frame (
               new_vbox_pack_compact (
                   new_vbox_pack (
                       new_text_box_for_int (\%pr::win, 'msgs_x', \%HPVALUE),
                       new_text_box_for_int (\%pr::win, 'msgs_y', \%HPVALUE)),
                   new_hbox_pack (
                       new_text_box_for_int (\%pr::win, 'msgs_w', \%HPVALUE),
                       new_text_box_for_int (\%pr::win, 'msgs_h', \%HPVALUE))),
               _('Message window')
           );
}

sub new_winpos_subpage_sendrecv() {
    return new_vbox_pack (
               new_subpage_frame (
                   new_hbox_pack (
                       new_text_box_for_int (\%pr::win, 'send_w', \%HPVALUE),
                       new_text_box_for_int (\%pr::win, 'send_h', \%HPVALUE)),
                   _('Send window'), 'not-packed'),
               new_subpage_frame (
                   new_hbox_pack (
                       new_text_box_for_int (\%pr::win, 'recv_w', \%HPVALUE),
                       new_text_box_for_int (\%pr::win, 'recv_h', \%HPVALUE)),
                   _('Receive window'), 'not-packed')
           );
}

sub new_winpos_subpage_fold() {
    return new_vbox_pack (
               new_subpage_frame (
                   new_vbox_pack_compact (
                       new_vbox_pack (
                            new_text_box_for_int (\%pr::win, 'fold_x', \%HPVALUE),
                            new_text_box_for_int (\%pr::win, 'fold_y', \%HPVALUE)),
                       new_hbox_pack (
                           new_text_box_for_int (\%pr::win, 'fold_w', \%HPVALUE),
                           new_text_box_for_int (\%pr::win, 'fold_h', \%HPVALUE))),
                   _('Folder window'), 'not-packed'),
               new_subpage_frame (
                   new_hbox_pack (
                       new_text_box_for_int (\%pr::win, 'fsel_w', \%HPVALUE),
                       new_text_box_for_int (\%pr::win, 'fsel_h', \%HPVALUE)),
                   _('Folder selection window'), 'not-packed')
           );
}

sub new_winpos_subpage_addrbook() {
    return new_vbox_pack (
                new_subpage_frame (
                     new_hbox_pack (
                          new_text_box_for_int (\%pr::win, 'addr_w', \%HPVALUE),
                          new_text_box_for_int (\%pr::win, 'addr_h', \%HPVALUE)),
                     _('Addressbook main window'), 'not-packed'),
                new_subpage_frame (
                     new_hbox_pack (
                          new_text_box_for_int (\%pr::win, 'adep_w', \%HPVALUE),
                          new_text_box_for_int (\%pr::win, 'adep_h', \%HPVALUE)),
                     _('Edit person window'), 'not-packed'),
                new_subpage_frame (
                     new_hbox_pack (
                          new_text_box_for_int (\%pr::win, 'adeg_w', \%HPVALUE),
                          new_text_box_for_int (\%pr::win, 'adeg_h', \%HPVALUE)),
                     _('Edit group window'), 'not-packed'),
                new_subpage_frame (
                     new_hbox_pack (
                          new_text_box_for_int (\%pr::win, 'adda_w', \%HPVALUE),
                          new_text_box_for_int (\%pr::win, 'adda_h', \%HPVALUE)),
                     _('Add address window'), 'not-packed'),
                new_subpage_frame (
                     new_hbox_pack (
                          new_text_box_for_int (\%pr::win, 'addf_w', \%HPVALUE),
                          new_text_box_for_int (\%pr::win, 'addf_h', \%HPVALUE)),
                     _('Folder select window'), 'not-packed')
           );
}

sub new_winpos_subpage_accounts() {
    return new_vbox_pack (
                new_subpage_frame (
                     new_hbox_pack (
                          new_text_box_for_int (\%pr::win, 'acco_w', \%HPVALUE),
                          new_text_box_for_int (\%pr::win, 'acco_h', \%HPVALUE)),
                     _('Accounts window'), 'not-packed'),
                new_subpage_frame (
                     new_hbox_pack (
                          new_text_box_for_int (\%pr::win, 'acce_w', \%HPVALUE),
                          new_text_box_for_int (\%pr::win, 'acce_h', \%HPVALUE)),
                     _('Edit account window'), 'not-packed')
           );
}

sub new_winpos_subpage_filtering() {
    return new_vbox_pack (
                new_subpage_frame (
                     new_hbox_pack (
                          new_text_box_for_int (\%pr::win, 'filt_w', \%HPVALUE),
                          new_text_box_for_int (\%pr::win, 'filt_h', \%HPVALUE)),
                     _('Filtering window'), 'not-packed'),
                new_subpage_frame (
                     new_hbox_pack (
                          new_text_box_for_int (\%pr::win, 'fila_w', \%HPVALUE),
                          new_text_box_for_int (\%pr::win, 'fila_h', \%HPVALUE)),
                     _('Filtering actions window'), 'not-packed'),
                new_subpage_frame (
                     new_hbox_pack (
                          new_text_box_for_int (\%pr::win, 'fild_w', \%HPVALUE),
                          new_text_box_for_int (\%pr::win, 'fild_h', \%HPVALUE)),
                     _('Filtering debug window'), 'not-packed'),
                new_subpage_frame (
                     new_hbox_pack (
                          new_text_box_for_int (\%pr::win, 'matc_w', \%HPVALUE),
                          new_text_box_for_int (\%pr::win, 'matc_h', \%HPVALUE)),
                     _('Matcher window'), 'not-packed')
           );
}

sub new_winpos_subpage_prefs() {
    return new_vbox_pack (
                new_subpage_frame (
                     new_hbox_pack (
                          new_text_box_for_int (\%pr::win, 'pref_w', \%HPVALUE),
                          new_text_box_for_int (\%pr::win, 'pref_h', \%HPVALUE)),
                     _('Preferences window'), 'not-packed'),
                new_subpage_frame (
                     new_hbox_pack (
                          new_text_box_for_int (\%pr::win, 'temp_w', \%HPVALUE),
                          new_text_box_for_int (\%pr::win, 'temp_h', \%HPVALUE)),
                     _('Templates window'), 'not-packed'),
                new_subpage_frame (
                     new_hbox_pack (
                          new_text_box_for_int (\%pr::win, 'acti_w', \%HPVALUE),
                          new_text_box_for_int (\%pr::win, 'acti_h', \%HPVALUE)),
                     _('Actions window'), 'not-packed'),
                new_subpage_frame (
                     new_hbox_pack (
                          new_text_box_for_int (\%pr::win, 'tags_w', \%HPVALUE),
                          new_text_box_for_int (\%pr::win, 'tags_h', \%HPVALUE)),
                     _('Tags window'), 'not-packed'),
                new_subpage_frame (
                     new_hbox_pack (
                          new_text_box_for_int (\%pr::win, 'plug_w', \%HPVALUE),
                          new_text_box_for_int (\%pr::win, 'plug_h', \%HPVALUE)),
                     _('Plugins window'), 'not-packed')
           );
}

sub new_winpos_subpage_misc() {
    return new_vbox_pack (
                new_subpage_frame (
                     new_hbox_pack (
                          new_text_box_for_int (\%pr::win, 'logw_w', \%HPVALUE),
                          new_text_box_for_int (\%pr::win, 'logw_h', \%HPVALUE)),
                     _('Log window'), 'not-packed'),
                new_subpage_frame (
                     new_hbox_pack (
                          new_text_box_for_int (\%pr::win, 'prin_w', \%HPVALUE),
                          new_text_box_for_int (\%pr::win, 'prin_h', \%HPVALUE)),
                     _('Print preview window'), 'not-packed'),
                new_subpage_frame (
                     new_hbox_pack (
                          new_text_box_for_int (\%pr::win, 'sour_w', \%HPVALUE),
                          new_text_box_for_int (\%pr::win, 'sour_h', \%HPVALUE)),
                     _('View source window'), 'not-packed')
           );
}

sub new_winpos_page() {
    my $winbook = Gtk2::Notebook->new;
    $winbook->set_tab_pos ('right');
    $winbook->append_page (new_winpos_subpage_main, _('Main'));
    $winbook->append_page (new_winpos_subpage_msgs, _('Message'));
    $winbook->append_page (new_winpos_subpage_sendrecv, _('Send/Receive'));
    $winbook->append_page (new_winpos_subpage_fold, _('Folder'));
    $winbook->append_page (new_winpos_subpage_addrbook, _('Addressbook'));
    $winbook->append_page (new_winpos_subpage_accounts, _('Accounts'));
    $winbook->append_page (new_winpos_subpage_filtering, _('Filtering'));
    $winbook->append_page (new_winpos_subpage_prefs, _('Preferences'));
    $winbook->append_page (new_winpos_subpage_misc, _('Other'));
    return $winbook;
}

%pr::acc = ( # per account hidden preferences
    tls_set => [
        'gnutls_set_priority',
        $xl::s{l_acc_gtls_set},
        $xl::s{h_acc_gtls_set},
        'bool',
        '3.9.0.181',
        '0',
    ],
    tls_pri => [
        'gnutls_priority',
        $xl::s{l_acc_gtls_pri},
        $xl::s{h_acc_gtls_pri},
        'char,0,256,32',
        '3.9.0.181',
        '0',
    ],
);

sub new_account_subpage($) {
    my ($akey) = @_;
    return new_vbox_pack (
                new_subpage_frame (
                    new_vbox_pack (
                        new_check_button_for (\%pr::acc, 'tls_set', $ACHPVALUE{$akey}),
                        new_text_box_for_nchar (\%pr::acc, 'tls_pri', $ACHPVALUE{$akey})),
                    _('GnuTLS priority'), 'not-packed')
           );
}

sub new_accounts_page() {
    my $accbook = Gtk2::Notebook->new;
    $accbook->set_tab_pos ('right');
    my @akeys = sort {
        $ACPREFS{$a}{'account_name'} cmp $ACPREFS{$b}{'account_name'}
    } keys %ACPREFS;
    foreach (@akeys) {
        my $name = $ACPREFS{$_}{'account_name'};
        my $isdef = ($ACPREFS{$_}{'is_default'} eq '1');
        my $page = new_account_subpage ($_);
        $accbook->append_page ($page, $isdef? '<b>' . $name . '</b>': $name);
        if ($isdef) {
            my $label = $accbook->get_tab_label ($page);
            $label->set_use_markup (TRUE);
        }
    }
    $accbook->set_scrollable (TRUE);
    return $accbook;
}

%pr::plu = ( # plugins hidden preferences
    # att_remover
    arm_winw => [
        'win_width',
        $xl::s{l_win_w},
        $xl::s{h_win_w},
        'int,0,3000', # 0 pixels - 3000 pixels
        '3.9.0.74',
        '-1',
        'AttRemover',
    ],
    arm_winh => [
        'win_height',
        $xl::s{l_win_h},
        $xl::s{h_win_h},
        'int,0,3000', # 0 pixels - 3000 pixels
        '3.9.0.74',
        '-1',
        'AttRemover',
    ],
    # GPG
    gpg_alimit => [
        'autocompletion_limit',
        $xl::s{l_plu_gpg_alimit},
        $xl::s{h_plu_gpg_alimit},
        'int,0,100',
        '3.12.0.75',
        '0',
        'GPG',
    ],
    # managesieve
    msv_winw => [
        'manager_win_width',
        $xl::s{l_win_w},
        $xl::s{h_win_w},
        'int,0,3000', # 0 pixels - 3000 pixels
        '3.11.1.210',
        '-1',
        'ManageSieve',
    ],
    msv_winh => [
        'manager_win_height',
        $xl::s{l_win_h},
        $xl::s{h_win_h},
        'int,0,3000', # 0 pixels - 3000 pixels
        '3.11.1.210',
        '-1',
        'ManageSieve',
    ],
    # libravatar
    lav_burl => [
        'base_url',
        $xl::s{l_plu_lav_burl},
        $xl::s{h_plu_lav_burl},
        'char,0,1024,32',
        '3.9.3.32',
        'http://cdn.libravatar.org/avatar',
        'Libravatar',
    ],
    # perl
    prl_flvb => [
        'filter_log_verbosity',
        $xl::s{l_plu_prl_flvb},
        $xl::s{h_plu_prl_flvb},
        '0=l_plu_prl_none;1=l_plu_prl_manual;2=l_plu_prl_action;3=l_plu_prl_match',
        '3.9.0.75',
        '2',
        'PerlPlugin',
    ],
);

sub new_plugins_page() {
    my %frame = ();
    $frame{'AttRemover'} =
                new_subpage_frame (
                     new_hbox_pack (
                          new_text_box_for_int (\%pr::plu, 'arm_winw', $PLHPVALUE{'AttRemover'}),
                          new_text_box_for_int (\%pr::plu, 'arm_winh', $PLHPVALUE{'AttRemover'})),
                     _('Attachment remover'), 'not-packed');
    $frame{'GPG'} =
                new_subpage_frame (
                     new_hbox_pack (
                          new_text_box_for_int (\%pr::plu, 'gpg_alimit', $PLHPVALUE{'GPG'})),
                     _('GPG'), 'not-packed');
    $frame{'ManageSieve'} =
                new_subpage_frame (
                     new_hbox_pack (
                          new_text_box_for_int (\%pr::plu, 'msv_winw', $PLHPVALUE{'ManageSieve'}),
                          new_text_box_for_int (\%pr::plu, 'msv_winh', $PLHPVALUE{'ManageSieve'})),
                     _('Sieve manager'), 'not-packed');
    $frame{'Libravatar'} =
                new_subpage_frame (
                     new_hbox_pack (
                          new_text_box_for_nchar (\%pr::plu, 'lav_burl', $PLHPVALUE{'Libravatar'})),
                     _('Libravatar'), 'not-packed');
    $frame{'PerlPlugin'} =
                new_subpage_frame (
                     new_hbox_pack (
                          new_selection_box_for (\%pr::plu, 'prl_flvb', $PLHPVALUE{'PerlPlugin'})),
                     _('Perl'), 'not-packed');
    foreach (@PLUGINS) {
        $frame{$_}->set_sensitive (defined $PLHPVALUE{$_});
    }
    return new_vbox_pack (
                $frame{'AttRemover'},
                $frame{'GPG'},
                $frame{'ManageSieve'},
                $frame{'Libravatar'},
                $frame{'PerlPlugin'});
}

sub new_hotkeys_page() {
    my $swin = Gtk2::ScrolledWindow->new ();
    my $vbox = Gtk2::VBox->new (FALSE, 5);
    foreach my $gkey (sort keys %$HOTKEYS) {
        my $group = $HOTKEYS->{$gkey};
        my $glabel = Gtk2::Label->new ('<b>' . $gkey . '</b>');
        $glabel->set_use_markup (TRUE);
        $glabel->set_alignment (0, 0.5);
        $vbox->pack_start ($glabel, FALSE, FALSE, 1);
        $vbox->pack_start (Gtk2::HSeparator->new (), FALSE, FALSE, 1);
        my $trows = keys %$group;
        my $t0 = Gtk2::Table->new ($trows, 2, FALSE);
        my $row = 0;
        foreach my $akey (sort keys %$group) {
            my $hkey = $group->{$akey}->{'key'};
            $hkey =~ s/\"//g;
            $hkey = '…' if ($hkey eq '');
            my $sakey = $akey;
            $sakey =~ s/[<>]//g; # <rrsyl> and <IMAPFolder> !?
            my $label = Gtk2::Label->new ('<small>' . $sakey . '</small>');
            $label->set_use_markup (TRUE);
            my $value = Gtk2::Button->new_with_label ($hkey);
            $label->set_alignment (0, 0.5);
            $t0->attach ($label, 0, 1, $row, $row + 1, 'fill', 'expand', 3, 1);
            $t0->attach ($value, 1, 2, $row, $row + 1, 'fill', 'shrink', 3, 1);
            ++$row;
        }
        $vbox->pack_start ($t0, FALSE, FALSE, 1);
        $vbox->pack_start (Gtk2::HSeparator->new (), FALSE, FALSE, 1);
    }
    $swin->set_border_width (5);
    $swin->set_shadow_type ('none');
    $swin->set_policy ('automatic', 'always');
    $swin->add_with_viewport ($vbox);
    return $swin;
}

sub new_info_page() {
    my $t0 = Gtk2::Table->new (7, 2, FALSE);
    my $v = get_toolkit_versions ();
    my %labels = (
        'glib' => 'Perl-GLib',
        'glib-r' => _('GLib runtime'),
        'glib-b' => _('GLib built'),
        'gtk2' => 'Perl-GTK2',
        'gtk2-r' => _('GTK2 runtime'),
        'gtk2-b' => _('GTK2 built'),
    );
    my $row = 0;
    foreach (sort keys %$v) {
        if (defined $v->{$_}) {
            my $label = Gtk2::Label->new ($labels{$_});
            my $value = Gtk2::Label->new ('<b>' . $v->{$_} . '</b>');
            $label->set_alignment (0, 0.5);
            $value->set_alignment (0, 0.5);
            $value->set_use_markup (TRUE);
            $t0->attach ($label, 0, 1, $row, $row + 1, 'fill', 'shrink', 8, 6);
            $t0->attach ($value, 1, 2, $row, $row + 1, 'fill', 'shrink', 8, 6);
            ++$row;
        }
    }
    my $t1 = Gtk2::Table->new (2, 2, FALSE);
    my @lbl = map { $_->set_alignment (0, 0.5); $_ } (
        Gtk2::Label->new (_('Binary')),
        Gtk2::Label->new (_('Configuration'))
    );
    my $cfgv = $CONFIGDATA->{'Common'}{'config_version'};
    $cfgv //= '';
    my @val = map { $_->set_alignment (0, 0.5); $_->set_use_markup (TRUE); $_ } (
        Gtk2::Label->new ('<b>' . $CLAWSV . '</b>'),
        Gtk2::Label->new ('<b>' . $cfgv . '</b>')
    );
    for (my $i = 0; $i <= $#lbl; ++$i) {
        $t1->attach ($lbl[$i], 0, 1, $i, $i + 1, 'fill', 'shrink', 8, 6);
        $t1->attach ($val[$i], 1, 2, $i, $i + 1, 'fill', 'shrink', 8, 6);
    }
    return new_vbox_pack (
                new_subpage_frame ($t0, _('Library versions'), 'not-packed'),
                new_subpage_frame ($t1, _('Claws Mail versions'), 'not-packed'));
}

# version info
sub get_toolkit_versions {
    my %versions = ();
    $versions{'glib'} = $Glib::VERSION;
    # version info stuff appeared in 1.040
    if ($Glib::VERSION >= 1.040) {
        $versions{'glib-b'} = join('.', Glib->GET_VERSION_INFO);
        $versions{'glib-r'} = join('.',
            &Glib::major_version, &Glib::minor_version, &Glib::micro_version);
    }
    $versions{'gtk2'} = $Gtk2::VERSION;
    if ($Gtk2::VERSION >= 1.040) {
        $versions{'gtk2-b'} = join('.', Gtk2->GET_VERSION_INFO);
        $versions{'gtk2-r'} = join('.',
            &Gtk2::major_version, &Gtk2::minor_version, &Gtk2::micro_version);
    }
    return \%versions;
}

sub print_version() {
    print $xl::s{about_title} . "\n";
    print $xl::s{about_version} . " $VERSION\n";
    my $v = get_toolkit_versions ();
    if ($v->{'glib-b'}) {
        print _("Perl-GLib version {glibv}, built for {glibb}, running with {glibr}.",
                glibv => $v->{'glib'},
                glibb => $v->{'glib-b'},
                glibr => $v->{'glib-r'});
    } else {
        print _("Perl-GLib version {glibv}.", glibv => $v->{'glib'});
    }
    print "\n";
    if ($v->{'gtk2-b'}) {
        print _("Perl-GTK2 version {gtkv}, built for {gtkb}, running with {gtkr}.",
                gtkv => $v->{'gtk2'},
                gtkb => $v->{'gtk2-b'},
                gtkr => $v->{'gtk2-r'});
    } else {
        print _("Perl-GTK2 version {gtkv}.", gtkv => $v->{'gtk2'});
    }
    print "\n";
    my $clawsver = ($CLAWSV eq "") ?
                _("Claws Mail was not found!") :
                _("Claws Mail returned version {cmv}.", cmv => $CLAWSV);
    print $clawsver . "\n";
}

# the command line help
sub print_help() {
    my $line = '-' x length ($xl::s{about_title});
    say $line;
    say $xl::s{about_title};
    say $line;
    my @help = (
        _("Syntax:"),
        _("  clawsker [options]"),
        _("Options:"),
        _("  -a|--alternate-config-dir <dir>  Uses <dir> as Claws Mail configuration."),
        _("  -b|--verbose                     More messages on standard output."),
        _("  -c|--clawsrc <file>              Uses <file> as full resource name."),
        _("  -h|--help                        Prints this help screen and exits."),
        _("  -r|--read-only                   Disables writing changes to disk."),
        _("  -v|--version                     Prints version information and exits.")
    );
    foreach (@help) { say $_ }
}

sub parse_command_line {
    my $cont = TRUE;
    $CLAWSV = get_claws_version ();
    eval {
        GetOptions('h|help' => sub { print_help (); $cont = FALSE },
            'v|version' => sub { print_version (); $cont = FALSE },
            'b|verbose' => sub { $VERBOSE = TRUE },
            'r|read-only' => sub { $READONLY = TRUE },
            'u|use-claws-version=s' => \&opt_use_claws_version,
            'a|alternate-config-dir=s' => \&opt_alternate_config_dir,
            'c|clawsrc=s' => \&opt_clawsrc)
        or die _("try -h or --help for syntax.\n");
    };
    if ($@) {
        my $msg = _("Error in options: {msg}\n", msg => $@);
        if (defined $ENV{'DISPLAY'} and $ENV{'DISPLAY'} ne '') {
            eval { Gtk2->init };
            error_dialog ($msg) unless $@;
        }
        die $msg;
    }
    return $cont;
}

sub opt_use_claws_version {
    my ($name, $value) = @_;
    die _("Error: {opt} requires a dotted numeric value argument\n", opt => $name)
        unless ($value =~ /^[\d\.]+$/);
    $CLAWSV = $value;
}

sub opt_alternate_config_dir {
    my ($name, $value) = @_;
    die _("Error: '{dir}' is not a directory or does not exist\n", dir => $value)
        unless -d $value;
    $CONFIGDIR = $value;
    $CONFIGDIR .= "/" unless ($CONFIGDIR =~ /.*\/$/);
    $ALTCONFIGDIR = TRUE;
}

sub opt_clawsrc {
    my ($name, $value) = @_;
    die _("Error: '{value}' is not a file or does not exist\n", value => $value)
        unless -f $value;
    set_rc_filename ($value);
}

# update the hidden preferences status from loaded values
sub init_hidden_preferences {
    foreach my $hash (\%pr::beh, \%pr::col, \%pr::gui, \%pr::oth, \%pr::win) {
        foreach my $key (keys %$hash) {
            $HPVALUE{${$hash}{$key}[NAME]} = $PREFS{${$hash}{$key}[NAME]};
        }
    }
    foreach my $akey (keys %ACPREFS) {
        foreach my $key (keys %pr::acc) {
            my $pname = $pr::acc{$key}[NAME];
            $ACHPVALUE{$akey}{$pname} = $ACPREFS{$akey}{$pname};
        }
    }
    foreach my $key (keys %pr::plu) {
        my $plugin = $pr::plu{$key}[PLUGIN];
        my $pname = $pr::plu{$key}[NAME];
        if (defined $PLPREFS{$plugin}) {
            $PLHPVALUE{$plugin}{$pname} = $PLPREFS{$plugin}{$pname};
        }
    }
    return TRUE;
}

# generic load/save resource files
sub load_resource {
    my $rc = shift;
    my %data = ();
    my %meta = ();
    my $line = 0;
    open (RCF, '<:encoding(utf8)', $rc)
        or die _("Error: opening '{file}' for reading", file => $rc) . ": $!\n";
    my $section = '_'; # default unnamed section
    while (<RCF>) {
        chomp;
        ++$line;
        next if (/^\s*$/);
        if (/^\[([^\]]+)\]$/) { # new section
            $section = $1;
            die _("Error: duplicate section '{sect}' in resource file '{file}'\n",
                sect => $section, file => $rc) if ($data{$section});
            $data{$section} = {};
            $meta{$section}{'#'} = $line;
        }
        elsif (/^([0-9a-z_]+)=(.*)$/) { # key=value
            $data{$section}{$1} = $2;
            $meta{$section}{$1} = $line;
        }
        elsif (/^(.*)$/) { # lone value
            push (@{$data{$section}{'_'}}, $1);
        }
    }
    close (RCF);
    return (\%data, \%meta);
}

sub save_resource {
    my ($rc, $data, $meta) = @_;
    open (RCF, '>:utf8', $rc)
        or die _("Error: opening '{file}' for writing", file => $rc) . ": $!\n";
    my @sections = keys %$data;
    if (defined $meta) {
        @sections = sort {
            $meta->{$a}{'#'} <=> $meta->{$b}{'#'}
        } @sections
    }
    foreach my $section (@sections) {
        say RCF "[$section]";
        if (ref ($data->{$section}{'_'}) eq 'ARRAY') {
            foreach my $val (@{$data->{$section}{'_'}}) {
                say RCF $val;
            }
        } else {
            my @keys = keys %{$data->{$section}};
            if (defined $meta) {
                @keys = sort {
                    $meta->{$section}{$a} <=> $meta->{$section}{$b}
                } @keys
            }
            foreach my $key (@keys) {
                my $val = $data->{$section}{$key};
                say RCF "$key=$val";
            }
        }
        say RCF "";
    }
    close (RCF);
}

# specific loaders
sub load_menurc {
    my $rc = shift;
    open (RCF, '<:encoding(utf8)', $rc)
        or die _("Error: opening '{file}' for reading", file => $rc) . ": $!\n";
    my %groups = ();
    my $line = 0;
    while (<RCF>) {
        chomp;
        if (/^; \(gtk_accel_path "<([A-Za-z]+)>([^"]+)" ([^\)]+)\)$/) {
            my %data = ('key' => $3, 'enabled' => FALSE, 'line' => $line);
            $groups{$1}{$2} = \%data;
            # say "group -> $1 | path -> $2 | key -> $3";
        } elsif (/^\(gtk_accel_path "<([A-Za-z]+)>([^"]+)" ([^\)]+)\)$/) {
            my %data = ('key' => $3, 'enabled' => TRUE, 'line' => $line);
            $groups{$1}{$2} = \%data;
            # say "group -> $1 | path -> $2 | key -> $3";
        }
        ++$line;
    }
    close (RCF);
    return \%groups;
}

sub save_menurc {
    my ($rc, $groups) = @_;
    my @lines = ();
    foreach my $gkey (keys %$groups) {
        my $group = $groups->{$gkey};
        foreach my $akey (keys %$group) {
            my $data = $group->{$akey};
            my $key = $data->{'key'};
            my $line = $data->{'line'};
            $lines[$line] = ($data->{'enabled'})? '': '; ';
            $lines[$line] .= '(gtk_accel_path "<'
                    . $gkey . '>' . $akey . '" ' . $key . ')';
        }
    }
    open (RCF, '>:utf8', $rc)
        or die _("Error: opening '{file}' for writing", file => $rc) . ": $!\n";
    say RCF '; claws-mail GtkAccelMap rc-file         -*- scheme -*-';
    say RCF '; this file is an automated accelerator map dump';
    say RCF ';';
    foreach (@lines) { say RCF $_ if $_ }
    close (RCF);
}

# load current status from disc
sub load_rc_preferences {
    my $rc = get_rc_filename ();
    log_message ("Loading preferences from $rc\n");
    return FALSE unless check_rc_file ($rc);
    ($CONFIGDATA, $CONFIGMETA) = load_resource ($rc);
    foreach (keys %{$CONFIGDATA->{'Common'}}) {
        $PREFS{$_} = $CONFIGDATA->{'Common'}{$_};
    }
    foreach my $plugin (@PLUGINS) {
        if (defined $CONFIGDATA->{$plugin}) {
            push (@AVPLUGINS, $plugin);
            foreach (keys %{$CONFIGDATA->{$plugin}}) {
                $PLPREFS{$plugin}{$_} = $CONFIGDATA->{$plugin}{$_};
            }
        }
    }
    return TRUE;
}

sub load_ac_preferences {
    my $rc = get_ac_rc_filename ();
    log_message ("Loading account preferences from $rc\n");
    return FALSE unless check_rc_file ($rc);
    ($ACCOUNTDATA, $ACCOUNTMETA) = load_resource ($rc);
    foreach my $asect (keys %$ACCOUNTDATA) {
        if ($asect =~ /^Account: (\d+)$/) {
            foreach (keys %{$ACCOUNTDATA->{$asect}}) {
                $ACPREFS{$1}{$_} = $ACCOUNTDATA->{$asect}{$_};
            }
        }
    }
    return TRUE;
}

sub load_hk_preferences {
    my $rc = get_menurc_filename ();
    return FALSE unless check_rc_file ($rc);
    $HOTKEYS = load_menurc ($rc);
    return TRUE;
}

sub load_preferences {
    return FALSE unless check_claws_not_running ();
    return (load_rc_preferences ()
        and load_ac_preferences ()
        and load_hk_preferences ()
    );
}

# save current preferences to disc
sub save_preferences {
    my $rc = get_rc_filename ();
    log_message ("Saving preferences to $rc\n");
    return FALSE unless check_rc_file ($rc);
    return FALSE unless check_claws_not_running ();
    my $rcbak = "$rc.backup";
    rename ($rc, $rcbak);
    foreach (keys %PREFS) {
        if (defined $HPVALUE{$_}) {
            $CONFIGDATA->{'Common'}{$_} = $HPVALUE{$_};
        }
    }
    foreach my $plugin (@AVPLUGINS) {
        foreach (keys %{$CONFIGDATA->{$plugin}}) {
            if (defined $PLHPVALUE{$plugin}{$_}) {
                $CONFIGDATA->{$plugin}{$_} = $PLHPVALUE{$plugin}{$_};
            }
        }
    }
    save_resource ($rc, $CONFIGDATA, $CONFIGMETA);
    return TRUE;
}

sub save_ac_preferences {
    my $rc = get_ac_rc_filename ();
    log_message ("Saving account preferences to $rc\n");
    return FALSE unless check_rc_file ($rc);
    return FALSE unless check_claws_not_running ();
    my $rcbak = "$rc.backup";
    rename ($rc, $rcbak);
    foreach my $asect (keys %$ACCOUNTDATA) {
        if ($asect =~ /^Account: (\d+)$/) {
            foreach (keys %{$ACCOUNTDATA->{$asect}}) {
                if (defined $ACHPVALUE{$1}{$_}) {
                    $ACCOUNTDATA->{$asect}{$_} = $ACHPVALUE{$1}{$_};
                }
            }
        }
    }
    save_resource ($rc, $ACCOUNTDATA, $ACCOUNTMETA);
    return TRUE;
}

# create notebook
sub new_notebook {
    my $nb = Gtk2::Notebook->new;
    #
    $nb->append_page (new_behaviour_page (), $xl::s{tab_behaviour});
    $nb->append_page (new_colours_page (), $xl::s{tab_colours});
    $nb->append_page (new_gui_page (), $xl::s{tab_gui});
    $nb->append_page (new_other_page (), $xl::s{tab_other});
    $nb->append_page (new_winpos_page (), $xl::s{tab_winpos});
    $nb->append_page (new_accounts_page (), $xl::s{tab_accounts});
    $nb->append_page (new_plugins_page (), $xl::s{tab_plugins});
    $nb->append_page (new_hotkeys_page (), $xl::s{tab_hotkeys});
    $nb->append_page (new_info_page (), $xl::s{tab_info});

    return $nb;
}

# create an about dialog
sub new_about_dialog {
    my ($parent) = @_;
    my $title = $xl::s{about_title};
    my $lic = $xl::s{about_license};
    my $vers = $xl::s{about_version} . " $VERSION";
    my $license =
"This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.";
    my $year = "2007-2017";
    my $holder = "Ricardo Mones &lt;ricardo\@mones.org&gt;";
    my $url = "http://www.claws-mail.org/clawsker.php";

    my $dialog = Gtk2::MessageDialog->new_with_markup ($parent,
                    [qw/modal destroy-with-parent/],
                    'info', 'close',
                    "<span size=\"x-large\" weight=\"bold\">$title</span>\n"
                    . "<span size=\"large\">$vers</span>\n\n"
                    . "<span color=\"blue\" size=\"large\">$url</span>\n\n"
                    . "<span>Copyright $year by $holder</span>\n\n"
                    . "<span size=\"large\">$lic</span>\n\n"
                    . "<span size=\"small\">$license</span>");
    $dialog->set_title ($xl::s{about});
    if (Gtk2->CHECK_VERSION (2, 10, 0)) {
        my @icons = get_app_icons ();
        my $image = Gtk2::Image->new_from_pixbuf ($icons[-1]);
        $image->show ();
        $image->set_alignment (0, 0);
        $dialog->set_image ($image);
    }
    #
    return $dialog;
}

# create buttons box
sub new_button_box {
    my ($parent, $adlg) = @_;
    my $b_about = Gtk2::Button->new_from_stock ('gtk-about');
    my $b_exit = Gtk2::Button->new_from_stock ('gtk-quit');
    my $b_apply = Gtk2::Button->new_from_stock ('gtk-apply');
    # disable button until is really implemented
    # my $b_undo = Gtk2::Button->new_from_stock ('gtk-undo');
    my $hbox = Gtk2::HBox->new (FALSE, 5);
    # signal handlers
    $b_exit->signal_connect (clicked => sub { Gtk2->main_quit });
    $b_apply->set_sensitive (not $READONLY);
    $b_apply->signal_connect (clicked => sub {
        save_preferences ($parent);
        save_ac_preferences ($parent);
    });
    # $b_undo->signal_connect (clicked => sub { undo_current_changes });
    $b_about->signal_connect (clicked => sub { $adlg->run; $adlg->hide });
    # package them
    $hbox->pack_end ($b_apply, FALSE, FALSE, 0);
    $hbox->pack_end ($b_exit, FALSE, FALSE, 0);
    # $hbox->pack_end ($b_undo, FALSE, FALSE, 0);
    $hbox->pack_start ($b_about, FALSE, FALSE, 0);
    #
    return $hbox;
}

sub get_app_icons {
    return @APPICONS if (@APPICONS);
    my @names;
    if (-d $DATADIR) { # installed
        my $dir = $DATADIR . '/icons/hicolor';
        @names = map {
            join ('/', ($dir, $_ . 'x' . $_, 'apps', $NAME . '.png'))
        } (48, 64, 128);
    } else { # unpacked tarball or git clone
        @names = map {
            join ('/', ('./icons', $NAME . '-' . $_ . '.png'));
        } (48, 64, 128);
    }
    foreach (@names) {
        my $icon = undef;
        $icon = Gtk2::Gdk::Pixbuf->new_from_file($_) if (-f $_);
        push @APPICONS, $icon if ($icon);
    }
    return @APPICONS;
}

# initialise
exit unless parse_command_line ();
Gtk2->init;
$main_window = Gtk2::Window->new ('toplevel');
exit unless load_preferences ();
exit unless init_hidden_preferences ();
# create main GUI
my $box = Gtk2::VBox->new (FALSE, 5);
$box->set_border_width(3);
my $about = new_about_dialog ();
$box->pack_start (new_notebook (), FALSE, FALSE, 0);
$box->pack_end (new_button_box ($main_window, $about), FALSE, FALSE, 0);
$main_window->signal_connect (delete_event => sub { Gtk2->main_quit });
$main_window->set_title ($xl::s{win_title});
$main_window->set_icon_list (get_app_icons ());
$main_window->add ($box);
$main_window->show_all;
Gtk2->main;

